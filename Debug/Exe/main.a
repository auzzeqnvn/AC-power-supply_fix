;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : AC_Power_Supply_Fix_Protect
;Version : 1.0
;Date    : 11/28/2018
;Author  :
;Company :
;Comments:
;Bao ve nguon AC 6VAC/1A, 12VAC/1A, 24VAC/6A
;Phat canh bao va bao ve nguon khi dong dien vuot 20%
;
;Chip type               : ATtiny24
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*******************************************************/
;
;#include <tiny24.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;
;#include <delay.h>
;
;
;#define ADC_POSITIVE_24 1
;#define ADC_POSITIVE_12 2
;#define ADC_POSITIVE_6  3
;#define ADC_NEGATIVE_6  4
;#define ADC_NEGATIVE_12 5
;#define ADC_SET 7
;
;#define CONTROL_24  PORTB.0
;#define CONTROL_UNDER_24    PORTB.2
;#define CONTROL_BUZZER  PORTB.1
;
;#define CONTROL_24_ON   CONTROL_24 = 0
;#define CONTROL_24_OFF  CONTROL_24 = 1
;
;#define CONTROL_UNDER_24_ON     CONTROL_UNDER_24 = 0
;#define CONTROL_UNDER_24_OFF    CONTROL_UNDER_24 = 1
;
;#define CONTROL_BUZZER_ON   CONTROL_BUZZER = 1
;#define CONTROL_BUZZER_OFF  CONTROL_BUZZER = 0
;
;#define ADC_POSITIVE_24_SET_OVER   400
;#define ADC_POSITIVE_12_SET_OVER   400
;#define ADC_POSITIVE_6_SET_OVER    400
;#define ADC_NEGATIVE_6_SET_OVER    400
;#define ADC_NEGATIVE_12_SET_OVER   400
;
;#define TIME_WARNING    400
;#define TIME_BUZZER     50
;
;bit Bit_Positive_24_Warning = 0;
;bit Bit_Positive_12_Warning = 0;
;bit Bit_Positive_6_Warning = 0;
;bit Bit_Negative_12_Warning = 0;
;bit Bit_Negative_6_Warning = 0;
;
;unsigned char   Uc_Positive_24_Over = 0;
;unsigned char   Uc_Positive_24_Under = 0;
;
;unsigned char   Uc_Positive_12_Over = 0;
;unsigned char   Uc_Positive_12_Under = 0;
;
;unsigned char   Uc_Positive_6_Over = 0;
;unsigned char   Uc_Positive_6_Under = 0;
;
;unsigned char   Uc_Negative_12_Over = 0;
;unsigned char   Uc_Negative_12_Under = 0;
;
;unsigned char   Uc_Negative_6_Over = 0;
;unsigned char   Uc_Negative_6_Under = 0;
;
;unsigned int    Uint_Warning_Count = TIME_WARNING;
;
;// Declare your global variables here
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0058 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0059     ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
;PCODE: $0000000D VOL: 0
;	adc_input -> Y+0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005A     // Delay needed for the stabilization of the ADC input voltage
; 0000 005B     delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 005C     // Start the AD conversion
; 0000 005D     ADCSRA|=(1<<ADSC);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 005E     // Wait for the AD conversion to complete
; 0000 005F     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0060     ADCSRA|=(1<<ADIF);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0061     return ADCW;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0062 }
;PCODE: $00000020 VOL: 0
;
;void    PROTECT(void)
; 0000 0065 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0066     unsigned int Uint_ADC_value;
; 0000 0067     unsigned int Uint_ADC_set_value;
; 0000 0068 
; 0000 0069     Uint_ADC_value = read_adc(ADC_POSITIVE_24);
;PCODE: $00000023 VOL: 0
;	Uint_ADC_value -> R16,R17
;	Uint_ADC_set_value -> R18,R19
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 006A     if(Uint_ADC_value > ADC_POSITIVE_24_SET_OVER)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 006B     {
; 0000 006C         Uc_Positive_24_Over++;
;PCODE: $0000002A VOL: 0
; 0000 006D         if(Uc_Positive_24_Over > 10)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006E         {
; 0000 006F             Uc_Positive_24_Over = 11;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0070             Uc_Positive_24_Under = 0;
;PCODE: $00000030 VOL: 0
; 0000 0071             Bit_Positive_24_Warning = 1;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0072         }
; 0000 0073     }
;PCODE: $00000033 VOL: 0
; 0000 0074     else
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0075     {
; 0000 0076         Uc_Positive_24_Under++;
;PCODE: $00000036 VOL: 0
; 0000 0077         if(Uc_Positive_24_Under > 10)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0078         {
; 0000 0079             Uc_Positive_24_Under = 11;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 007A             Uc_Positive_24_Over = 0;
;PCODE: $0000003C VOL: 0
; 0000 007B             Bit_Positive_24_Warning = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 007C         }
; 0000 007D     }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 007E 
; 0000 007F     Uint_ADC_value = read_adc(ADC_POSITIVE_12);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0080     if(Uint_ADC_value > ADC_POSITIVE_12_SET_OVER)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0081     {
; 0000 0082         Uc_Positive_12_Over++;
;PCODE: $00000047 VOL: 0
; 0000 0083         if(Uc_Positive_12_Over > 10)
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0084         {
; 0000 0085             Uc_Positive_12_Over = 11;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0086             Uc_Positive_12_Under = 0;
;PCODE: $0000004D VOL: 0
; 0000 0087             Bit_Positive_12_Warning = 1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0088         }
; 0000 0089     }
;PCODE: $00000050 VOL: 0
; 0000 008A     else
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008B     {
; 0000 008C         Uc_Positive_12_Under++;
;PCODE: $00000053 VOL: 0
; 0000 008D         if(Uc_Positive_12_Under > 10)
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008E         {
; 0000 008F             Uc_Positive_12_Under = 11;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0090             Uc_Positive_12_Over = 0;
;PCODE: $00000059 VOL: 0
; 0000 0091             Bit_Positive_12_Warning = 0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0092         }
; 0000 0093     }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0094 
; 0000 0095     Uint_ADC_value = read_adc(ADC_POSITIVE_6);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0096     if(Uint_ADC_value > ADC_POSITIVE_6_SET_OVER)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0097     {
; 0000 0098         Uc_Positive_6_Over++;
;PCODE: $00000064 VOL: 0
; 0000 0099         if(Uc_Positive_6_Over > 10)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 009A         {
; 0000 009B             Uc_Positive_6_Over = 11;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 009C             Uc_Positive_6_Under = 0;
;PCODE: $0000006A VOL: 0
; 0000 009D             Bit_Positive_6_Warning = 1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009E         }
; 0000 009F     }
;PCODE: $0000006D VOL: 0
; 0000 00A0     else
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00A1     {
; 0000 00A2         Uc_Positive_6_Under++;
;PCODE: $00000070 VOL: 0
; 0000 00A3         if(Uc_Positive_6_Under > 10)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00A4         {
; 0000 00A5             Uc_Positive_6_Under = 11;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A6             Uc_Positive_6_Over = 0;
;PCODE: $00000076 VOL: 0
; 0000 00A7             Bit_Positive_6_Warning = 0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A8         }
; 0000 00A9     }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00AA 
; 0000 00AB 
; 0000 00AC     Uint_ADC_value = read_adc(ADC_NEGATIVE_12);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AD     if(Uint_ADC_value > ADC_NEGATIVE_12_SET_OVER)
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AE     {
; 0000 00AF         Uc_Negative_12_Over++;
;PCODE: $00000081 VOL: 0
; 0000 00B0         if(Uc_Negative_12_Over > 10)
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00B1         {
; 0000 00B2             Uc_Negative_12_Over = 11;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00B3             Uc_Negative_12_Under = 0;
;PCODE: $00000087 VOL: 0
; 0000 00B4             Bit_Negative_12_Warning = 1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00B5         }
; 0000 00B6     }
;PCODE: $0000008A VOL: 0
; 0000 00B7     else
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00B8     {
; 0000 00B9         Uc_Negative_12_Under++;
;PCODE: $0000008D VOL: 0
; 0000 00BA         if(Uc_Negative_12_Under > 10)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00BB         {
; 0000 00BC             Uc_Negative_12_Under = 11;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00BD             Uc_Negative_12_Over = 0;
;PCODE: $00000093 VOL: 0
; 0000 00BE             Bit_Negative_12_Warning = 0;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00BF         }
; 0000 00C0     }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00C1 
; 0000 00C2 
; 0000 00C3     Uint_ADC_value = read_adc(ADC_NEGATIVE_6);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00C4     if(Uint_ADC_value > ADC_NEGATIVE_6_SET_OVER)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00C5     {
; 0000 00C6         Uc_Negative_6_Over++;
;PCODE: $0000009E VOL: 0
; 0000 00C7         if(Uc_Negative_6_Over > 10)
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00C8         {
; 0000 00C9             Uc_Negative_6_Over = 11;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00CA             Uc_Negative_6_Under = 0;
;PCODE: $000000A4 VOL: 0
; 0000 00CB             Bit_Negative_6_Warning = 1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00CC         }
; 0000 00CD     }
;PCODE: $000000A7 VOL: 0
; 0000 00CE     else
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00CF     {
; 0000 00D0         Uc_Negative_6_Under++;
;PCODE: $000000AA VOL: 0
; 0000 00D1         if(Uc_Negative_6_Under > 10)
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00D2         {
; 0000 00D3             Uc_Negative_6_Under = 11;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00D4             Uc_Negative_6_Over = 0;
;PCODE: $000000B0 VOL: 0
; 0000 00D5             Bit_Negative_6_Warning = 0;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00D6         }
; 0000 00D7     }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00D8 
; 0000 00D9     if(Bit_Negative_6_Warning || Bit_Negative_12_Warning || Bit_Positive_12_Warning || Bit_Positive_6_Warning)
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00DA     {
; 0000 00DB         CONTROL_UNDER_24_OFF;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00DC         Uint_Warning_Count = 0;
;PCODE: $000000C5 VOL: 0
; 0000 00DD     }
; 0000 00DE     else if(Uint_Warning_Count >= TIME_WARNING)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00DF     {
; 0000 00E0         CONTROL_UNDER_24_ON;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00E1     }
; 0000 00E2 
; 0000 00E3     if(Bit_Positive_24_Warning)
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E4     {
; 0000 00E5         CONTROL_24_OFF;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00E6         Uint_Warning_Count = 0;
;PCODE: $000000D4 VOL: 0
; 0000 00E7     }
; 0000 00E8     else if(Uint_Warning_Count >= TIME_WARNING)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00E9     {
; 0000 00EA         CONTROL_24_ON;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00EB     }
; 0000 00EC 
; 0000 00ED      if(Uint_Warning_Count < TIME_WARNING)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00EE      {
; 0000 00EF 
; 0000 00F0         if(Uint_Warning_Count % TIME_BUZZER == 0)   CONTROL_BUZZER = !CONTROL_BUZZER;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00F1         Uint_Warning_Count++;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00F2      }
; 0000 00F3      else
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00F4      {
; 0000 00F5         CONTROL_BUZZER_OFF;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00F6      }
;PCODE: $000000F8 VOL: 0
; 0000 00F7      delay_ms(10);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00F8 }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;
;void main(void)
; 0000 00FB {
;PCODE: $00000100 VOL: 0
; 0000 00FC // Declare your local variables here
; 0000 00FD 
; 0000 00FE // Crystal Oscillator division factor: 1
; 0000 00FF #pragma optsize-
; 0000 0100 CLKPR=(1<<CLKPCE);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0101 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0102 #ifdef _OPTIMIZE_SIZE_
; 0000 0103 #pragma optsize+
; 0000 0104 #endif
; 0000 0105 
; 0000 0106 // Input/Output Ports initialization
; 0000 0107 // Port A initialization
; 0000 0108 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0109 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 010A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 010B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 010C 
; 0000 010D // Port B initialization
; 0000 010E // Function: Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 010F DDRB=(0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0110 // State: Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 0111 PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0112 
; 0000 0113 // Timer/Counter 0 initialization
; 0000 0114 // Clock source: System Clock
; 0000 0115 // Clock value: Timer 0 Stopped
; 0000 0116 // Mode: Normal top=0xFF
; 0000 0117 // OC0A output: Disconnected
; 0000 0118 // OC0B output: Disconnected
; 0000 0119 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 011A TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 011B TCNT0=0x00;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 011C OCR0A=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 011D OCR0B=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 011E 
; 0000 011F // Timer/Counter 1 initialization
; 0000 0120 // Clock source: System Clock
; 0000 0121 // Clock value: Timer1 Stopped
; 0000 0122 // Mode: Normal top=0xFFFF
; 0000 0123 // OC1A output: Disconnected
; 0000 0124 // OC1B output: Disconnected
; 0000 0125 // Noise Canceler: Off
; 0000 0126 // Input Capture on Falling Edge
; 0000 0127 // Timer1 Overflow Interrupt: Off
; 0000 0128 // Input Capture Interrupt: Off
; 0000 0129 // Compare A Match Interrupt: Off
; 0000 012A // Compare B Match Interrupt: Off
; 0000 012B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 012C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 012D TCNT1H=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 012E TCNT1L=0x00;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 012F ICR1H=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0130 ICR1L=0x00;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0131 OCR1AH=0x00;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0132 OCR1AL=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0133 OCR1BH=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0134 OCR1BL=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0135 
; 0000 0136 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0137 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0138 
; 0000 0139 // Timer/Counter 1 Interrupt(s) initialization
; 0000 013A TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 013B 
; 0000 013C // External Interrupt(s) initialization
; 0000 013D // INT0: Off
; 0000 013E // Interrupt on any change on pins PCINT0-7: Off
; 0000 013F // Interrupt on any change on pins PCINT8-11: Off
; 0000 0140 MCUCR=(0<<ISC01) | (0<<ISC00);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0141 GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0142 
; 0000 0143 // USI initialization
; 0000 0144 // Mode: Disabled
; 0000 0145 // Clock source: Register & Counter=no clk.
; 0000 0146 // USI Counter Overflow Interrupt: Off
; 0000 0147 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0148 
; 0000 0149 // Analog Comparator initialization
; 0000 014A // Analog Comparator: Off
; 0000 014B // The Analog Comparator's positive input is
; 0000 014C // connected to the AIN0 pin
; 0000 014D // The Analog Comparator's negative input is
; 0000 014E // connected to the AIN1 pin
; 0000 014F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0150 // Digital input buffer on AIN0: On
; 0000 0151 // Digital input buffer on AIN1: On
; 0000 0152 DIDR0=(0<<ADC1D) | (0<<ADC2D);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0153 
; 0000 0154 // ADC initialization
; 0000 0155 // ADC Clock frequency: 1000.000 kHz
; 0000 0156 // ADC Voltage Reference: AVCC pin
; 0000 0157 // ADC Bipolar Input Mode: Off
; 0000 0158 // ADC Auto Trigger Source: ADC Stopped
; 0000 0159 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 015A // ADC4: On, ADC5: On, ADC6: On, ADC7: On
; 0000 015B DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 015C ADMUX=ADC_VREF_TYPE;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 015D ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 015E ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 015F CONTROL_BUZZER_ON;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0160 delay_ms(200);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0161 CONTROL_BUZZER_OFF;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0162 
; 0000 0163 while (1)
;PCODE: $00000148 VOL: 0
; 0000 0164       {
; 0000 0165       // Place your code here
; 0000 0166         PROTECT();
;PCODE: $00000149 VOL: 0
; 0000 0167 
; 0000 0168       }
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0169 }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
